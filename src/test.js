/**
 *               __     __
 * .-----.-----.|__|.--|  |.-----.--.--.
 * |__ --|  _  ||  ||  _  ||  -__|  |  |
 * |_____|   __||__||_____||_____|___  |
 *       |__|                    |_____|
 *
 * SPIDEY v0.2.1
 *
 * Copyright (C) 2013 Fabio Cicerchia <info@fabiocicerchia.it>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Test Module
 *
 * It manage the test case files: creation, retrieving and parsing.
 *
 * @module Test
 */
var Test = function (fsWrapper, glob, mainDir) {
    /**
     * Test case directory.
     *
     * @property TEST_CASE_DIRECTORY
     * @type {String}
     * @default "/../tests/cases/"
     */
    this.TEST_CASE_DIRECTORY = '/tests/cases/';

    /**
     * Current instance.
     *
     * @property currentTest
     * @type {Object}
     * @default this
     */
    var currentTest = this;

    /**
     * Create test case file.
     *
     * @method createNewCaseFile
     * @param  {String}   name     The name of the test case.
     * @param  {String}   data     The data of the test case.
     * @param  {Function} callback The data of the test case.
     * @return undefined
     */
    this.createNewCaseFile = function (url, name, data, callback) {
        var k,
            content      = '',
            dir          = mainDir + currentTest.TEST_CASE_DIRECTORY + url.replace(/[^a-zA-Z0-9]/g, '_'),
            testCaseFile = dir + '/' + name + '.tst';

        if (url === '' || name === '' || Object.keys(data).length === 0) {
            return (callback !== undefined) ? callback() : undefined;
        }

        content += '; Test Case File\n';
        content += '; generated by Spidey v0.2.1 (http://fabiocicerchia.github.io/spidey) at ' + new Date().toUTCString() + '\n';
        content += '; url = ' + url + '\n';
        content += '; id = ' + name + '\n';
        content += '\n';
        content += '[POST]\n';

        for (k in data) {
            if (data.hasOwnProperty(k)) {
               content += k + '=' + data[k] + "\n";
            }
        }

        if (!fsWrapper.existsSync(dir)) {
            fsWrapper.mkdirSync(dir, '0777');
        }

        fsWrapper.writeFileSync(testCaseFile, content, {flag: 'w+', mode: 0755});

        if (callback !== undefined) {
            callback();
        }
    };

    /**
     * Returns a list of test cases based on the URL.
     *
     * @method getCases
     * @param  {String} url The URL for the test cases.
     * @return {Object}
     */
    this.getCases = function (url) {
        if (url === '' || !fsWrapper.existsSync(mainDir + this.TEST_CASE_DIRECTORY + url)) {
            return [];
        }

        var testCase,
            cases = [],
            files = glob.sync(mainDir + this.TEST_CASE_DIRECTORY + url.replace(/[^a-zA-Z0-9]/g, '_') + '/*.tst');

        files.forEach(function (value) {
            testCase = currentTest.parseCaseFile(value);

            if (testCase !== {}) {
                cases.push(testCase);
            }
        });

        return cases;
    };

    /**
     * TBD
     */
    this.parseINIString = function (data) {
        var regex   = {
                section: /^\s*\[\s*([^\]]*)\s*\]\s*$/,
                param:   /^\s*([\w\.\-\_\[\]]+)\s*=\s*(.*?)\s*$/,
                comment: /^\s*;.*$/
            },
            value   = {},
            lines   = data.split(/\r\n|\r|\n/),
            section = null,
            match,
            isArray;

        lines.forEach(function (line) {
            isArray = false;
            if (regex.comment.test(line)) {
                return;
            } else if(regex.param.test(line)) {
                match = line.match(regex.param);

                if (match[1].substr(match[1].length - 2, 2) === '[]') {
                    match[1] = match[1].substr(0, match[1].length - 2);
                    isArray = true;
                }

                if (match[2][0] === '"' && match[2][match[2].length - 1] === '"') {
                    match[2] = match[2].substr(1, match[2].length - 2);
                }

                if (isArray) {
                    if (section) {
                        if (typeof value[section][match[1]] === 'undefined') {
                            value[section][match[1]] = [];
                        }
                        value[section][match[1]].push(match[2]);
                    } else {
                        if (typeof value[match[1]] === 'undefined') {
                            value[match[1]] = [];
                        }
                        value[match[1]].push(match[2]);
                    }
                } else {
                    if (section) {
                        value[section][match[1]] = match[2];
                    } else {
                        value[match[1]] = match[2];
                    }
                }
            } else if (regex.section.test(line)) {
                match = line.match(regex.section);
                value[match[1]] = {};
                section = match[1];
            }
        });

        return value;
    };

    /**
     * Parse a test cases file to return the testing data to be used.
     *
     * @method parseCaseFile
     * @param  {String} The test case file.
     * @return {Object}
     */
    this.parseCaseFile = function (file) {
        var content;

        if (!fsWrapper.existsSync(file)) {
            return {};
        }

        content = fsWrapper.readFileSync(file).toString();

        return this.parseINIString(content);
    };
};

module.exports = Test;
