/**
 *               __                         _____ _______
 * .-----.---.-.|  |.--------.-----.-----._|     |     __|
 * |__ --|  _  ||  ||        |  _  |     |       |__     |
 * |_____|___._||__||__|__|__|_____|__|__|_______|_______|
 *
 * salmonJS v0.4.0
 *
 * Copyright (C) 2013 Fabio Cicerchia <info@fabiocicerchia.it>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

var rootdir = require('path').resolve('.'),
    srcdir  = rootdir + (process.env.SALMONJS_COV ? '/src-cov' : '/src'),
    fs      = require('fs'),
    glob    = require('glob'),
    chai    = require('chai'),
    expect  = chai.expect;

describe('createNewCaseFile', function () {
    it('createNewCaseFile', function (done) {
        var Test      = require(srcdir + '/test'),
            fsWrapper = new (require(srcdir + '/fs'))(fs),
            utils     = {},
            testObj   = new Test(fsWrapper, glob, srcdir + '/..', utils);

        testObj.createNewCaseFile('', 'test', {a: 1}, function () {
            var content;
            try {
                content = fsWrapper.read(testObj.TEST_CASE_DIRECTORY + 'test.tst');
            } catch (ignore) {}

            expect(content).to.equal(undefined); // doesn\'t create a file if url is empty
        });

        testObj.createNewCaseFile('http://www.example.com', '', {a: 1}, function () {
            var content;
            try {
                content = fsWrapper.read(testObj.TEST_CASE_DIRECTORY + 'http---www-example-com/.tst');
            } catch (ignore) {}

            expect(content).to.equal(undefined); // doesn\'t create a file if name is empty
        });

        done();
    });
});

describe('createNewCaseFile #2', function () {
    it('createNewCaseFile #2', function (done) {
        var Test      = require(srcdir + '/test'),
            fsWrapper = new (require(srcdir + '/fs'))(fs),
            utils     = {},
            testObj   = new Test(fsWrapper, glob, srcdir + '/..', utils, srcdir + '/../build/');

        testObj = new Test(fsWrapper, glob, srcdir + '/..', utils);
        testObj.createNewCaseFile('http://www.example.com', 'test', {}, function () {
            var content;
            try {
                content = fsWrapper.read(testObj.TEST_CASE_DIRECTORY + 'http---www-example-com/test.tst');
            } catch (ignore) {}

            expect(content).to.equal(undefined); // doesn\'t create a file if data is empty
        });

        done();
    });
});

describe('createNewCaseFile #3', function () {
    it('createNewCaseFile #3', function (done) {
        var Test      = require(srcdir + '/test'),
            fsWrapper = new (require(srcdir + '/fs'))(fs),
            utils     = {},
            testObj   = new Test(fsWrapper, glob, srcdir + '/..', utils, srcdir + '/../build/');

        testObj.createNewCaseFile('http://www.example.com', 'test', {POST:{a: 1, b: 2}}, function () {
            var content;
            try {
                content = fsWrapper.readFileSync(testObj.TEST_CASE_DIRECTORY + 'http---www-example-com/test.tst');
            } catch (ignore) { }
            fsWrapper.deleteTree(testObj.TEST_CASE_DIRECTORY + 'http---www-example-com');

            expect(content).to.match(/; Test Case File\n; generated by salmonJS v.+ \(.+\) at /);
            expect(content).to.match(/\n; url = http:\/\/www.example.com\n; id = test\n\n\[GET\]\n\n\[POST\]\na=1\nb=2\n\n\[COOKIE\]\n\n\[HTTP_HEADERS\]\n\n\[CONFIRM\]\n\n\[PROMPT\]\n/, 'creates a file if url, name and data is not empty');
        });

        done();
    });
});

describe('getCases', function () {
    it('getCases', function (done) {
        var Test      = require(srcdir + '/test'),
            fsWrapper = new (require(srcdir + '/fs'))(fs),
            utils     = {},
            testObj = new Test(fsWrapper, glob, srcdir + '/..', utils, srcdir + '/../build/');

        testObj.parseCaseFile = function () { return {}; };

        expect(testObj.getCases('')).to.deep.equal([]); // doesn\'t return anything if there are no matches
        expect(testObj.getCases('non-existent')).to.deep.equal([]); // doesn\'t return anything if there are no matches

        fsWrapper.mkdirSync(testObj.TEST_CASE_DIRECTORY + 'http---www-example-com');
        fsWrapper.writeFileSync(testObj.TEST_CASE_DIRECTORY + 'http---www-example-com/test.tst', '[POST]\na=1\nb=2\n');

        testObj = new Test(fsWrapper, glob, rootdir, utils, srcdir + '/../build/');
        testObj.parseCaseFile = function () { return {POST:{a: 1, b: 2}}; };

        expect(testObj.getCases('http://www.example.com')).to.deep.equal([{POST:{a: 1, b: 2}}]); // returns something if there are matches
        fsWrapper.deleteTree(testObj.TEST_CASE_DIRECTORY + 'http---www-example-com/');

        done();
    });
});

describe('parseCaseFile', function () {
    it('parseCaseFile', function (done) {
        var Test      = require(srcdir + '/test'),
            fsWrapper = new (require(srcdir + '/fs'))(fs),
            utils     = {},
            testObj   = new Test(fsWrapper, glob, srcdir + '/..', utils, srcdir + '/../build/');

        expect(testObj.parseCaseFile('non-existent')).to.deep.equal({}); // doesn\'t parse a non existent file

        done();
    });
});

describe('parseCaseFile #2', function () {
    it('parseCaseFile #2', function (done) {
        var Test      = require(srcdir + '/test'),
            fsWrapper = new (require(srcdir + '/fs'))(fs),
            utils     = {},
            testObj   = new Test(fsWrapper, glob, srcdir + '/..', utils, srcdir + '/../build/');

        expect(testObj.parseCaseFile('empty-file')).to.deep.equal({}); // parses an empty file

        done();
    });
});

describe('parseCaseFile #3', function () {
    it('parseCaseFile #3', function (done) {
        var Test      = require(srcdir + '/test'),
            fsWrapper = new (require(srcdir + '/fs'))(fs),
            utils     = {},
            testObj   = new Test(fsWrapper, glob, srcdir + '/..', utils, srcdir + '/../build/');

        utils.parseINIString = function() { return {a: '1', b: '2'}; };
        testObj = new Test(fsWrapper, glob, srcdir + '/..', utils);
        fsWrapper.writeFileSync(testObj.TEST_CASE_DIRECTORY + 'not-empty-file.tst', 'a=1\nb=2\n');
        expect(testObj.parseCaseFile(testObj.TEST_CASE_DIRECTORY + 'not-empty-file.tst')).to.deep.equal({a: '1', b: '2'}); // parses a not empty file
        fsWrapper.unlinkSync(testObj.TEST_CASE_DIRECTORY + 'not-empty-file.tst');

        fsWrapper.deleteTree(testObj.TEST_CASE_DIRECTORY + 'http---www-example-com');

        done();
    });
});
